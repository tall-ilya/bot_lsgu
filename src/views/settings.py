import math
from vkbottle.bot import Message, Bot, BotBlueprint
from vkbottle import Keyboard, KeyboardButtonColor, Text
from models import Lesson, ReplacementLesson, Timetable, User
from models.enums import GroupNumbers
from utils.iterator import AsyncIterator

BUTTONS_COUNT = 6
WEEK = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']


async def settings_view(message: Message, bot: BotBlueprint, user: User, is_subscribed):
    keyboard = Keyboard(one_time=False, inline=False)
    keyboard.add(Text("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚≠êÔ∏è", payload={"command": "favourite_timetable"}),
                 color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    if not user.is_subscribed:
        keyboard.add(Text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ", payload={"command": "settings", "set_is_subscribed": True}),
                     color=KeyboardButtonColor.POSITIVE)
    else:
        keyboard.add(Text("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üìÖ", payload={"command": "settings", "set_is_subscribed": False}),
                     color=KeyboardButtonColor.NEGATIVE)
    keyboard.row()
    keyboard.add(Text("–ù–∞–∑–∞–¥", payload={"command": "start"}), color=KeyboardButtonColor.SECONDARY)

    text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    if is_subscribed is True:
        text = "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ"
    elif is_subscribed is False:
        text = "–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üìÖ"
    await message.answer(message=text, keyboard=keyboard.get_json())


async def favourite_timetable_view(message: Message, bot: BotBlueprint, page: int, user: User):
    keyboard = Keyboard(one_time=False, inline=False)

    group_numbers = [group_number.value async for group_number in AsyncIterator(list(GroupNumbers))]
    group_numbers = group_numbers[BUTTONS_COUNT * (page - 1): BUTTONS_COUNT * page]
    async for counter, group_number in AsyncIterator(enumerate(group_numbers)):
        if counter == 3:
            keyboard.row()
        keyboard.add(Text(group_number, payload={"command": "set_group_number", "group_number": group_number}),
                     color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    use_row = False
    if page != 1:
        use_row = True
        keyboard.add(Text(" <- ", payload={"command": "favourite_timetable", "page": page - 1}),
                     color=KeyboardButtonColor.SECONDARY)

    if page < math.ceil(len(list(GroupNumbers)) / BUTTONS_COUNT):
        use_row = True
        keyboard.add(Text(" -> ", payload={"command": "favourite_timetable", "page": page + 1}),
                     color=KeyboardButtonColor.SECONDARY)
    if use_row:
        keyboard.row()
    keyboard.add(Text("–ù–∞–∑–∞–¥", payload={"command": "settings"}), color=KeyboardButtonColor.NEGATIVE)
    text = "–ö–∞–∫—É—é –≥—Ä—É–ø–ø—É –≤—ã —Ö–æ—Ç–∏—Ç–µ?"
    if user.group_number:
        text += f" (–°–µ–π—á–∞—Å {user.group_number})"
    await message.answer(message=text, keyboard=keyboard.get_json())


async def set_group_number_view(message: Message, bot: BotBlueprint, group_number: int):
    keyboard = Keyboard(one_time=False, inline=False)
    keyboard.add(Text("–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", payload={"command": "settings"}), color=KeyboardButtonColor.PRIMARY)
    await message.answer(message=f"–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞ {group_number}", keyboard=keyboard.get_json())
